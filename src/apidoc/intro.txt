{1 Introduction to Lambdoc}

It is fairly common in web applications for users to contribute with their
own content.  A well-known example are user comments on a blog post or article.
In the most basic scenarios, this content is limited to plain text.  However,
due to the limited expressiveness of this format, most sites will also accept
some form of markup that allows users to mark certain passages as bold text,
a superscript, etc.  The most common form of markup is a subset of [HTML],
though other formats (such as [BBcode] or [Wiki] markup) have also arisen
and gained some popularity.

Lambdoc is a library offering support for semantically rich markup languages
in {{:http://www.ocsigen.org/}Ocsigen} applications.  Besides the basic text
formatting commands (bold, emphasised, small caps, etc), Lambdoc supports
also much higher-level markup.  It allows users to declare tables, figures,
bibliographic entries, various levels of sectioning, internal labels and
references, mathematical formulas, etc.  Moreover, the features allowed
in a document are fully customisable.  You can therefore tell Lambdoc that
for a certain class of user input, only a specified subset of all available
features are allowed.

Lambdoc ships with a parser for the Lambtex markup language.  Lambtex is
largely inspired by [LaTeX], but offers a syntax that is simpler, more
consistent, and better in tune with the needs of web applications.  Moreover,
the Lambtex grammar supports the full gammut of features available for
Lambdoc documents.  Note, however, that Lambdoc is not tied to a particular
markup language.  One can easily write parsers for other languages and
integrate them with Lambdoc.

While Lambdoc can certainly be used for other purposes, the integration with
the Ocsigen framework was a major driver of its development.  Therefore,
Lambdoc ships with a module that converts any parsed document into a value
of Ocsigen's [XHTML.M].

{1 Using Lambdoc}

The following tutorials introduce various.

{ul
	{li {!Tutorial1.tutorial1}

		How to tell [Lambdoc] to parse, convert to [XHTML.M], and (de)serialise
		documents.  This tutorial will be sufficient for most users of the library.}
	{li {!Tutorial2.tutorial2}

		Customising allowed document features and processing parsed documents.}
	{li {!Tutorial3.tutorial3}

		Writing your own parser for a new markup language and converting documents
		to new formats.}}

{1 API}

{!indexlist}

